include "../../jl5/parse/jl5_ppg.cup"

package polyglot.ext.esj.parse;

import java.util.*;

import polyglot.ext.esj.types.ESJTypeSystem;
import polyglot.ext.esj.ast.*;
import polyglot.ext.jl5.ast.*;
import polyglot.ext.jl5.parse.*;

parser Grm extends polyglot.ext.jl5.parse.Grm {:
    public final ESJTypeSystem ts;
    public final ESJNodeFactory nf;

    public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = (ESJTypeSystem) t;
        nf = (ESJNodeFactory) n;
    }
:};

terminal Token PREDICATE;
terminal Token SOME;
terminal Token ALL;

non terminal MethodDecl pred_method_declaration, pred_method_header;
non terminal Block pred_method_body, pred_block;
non terminal List pred_block_statements;
non terminal List pred_statement;
non terminal List pred_statement_expression, pred_expression;

start with goal;

// Here begins the ESJ grammar extensions and modifications

extend class_member_declaration ::=
        pred_method_declaration:a {:
           List l = new TypedList(new LinkedList(), ClassMember.class, false);
           l.add(a);
           RESULT = l; 
	   :}
	   ;

pred_method_declaration ::=
        pred_method_header:a pred_method_body:b 
	   {: RESULT = (MethodDecl) a.body(b); :}
	   ;

pred_method_header ::=
        PREDICATE:a method_header:b
       	   {: RESULT = b; :}
	   ;

pred_method_body ::=
        pred_block:a 
	   {:  RESULT = a;  :}
	   ;

pred_block ::=
    LBRACE:n pred_block_statements:a RBRACE:d 
           {: RESULT = parser.nf.Block(parser.pos(n, d), a); :}
	   ;

pred_block_statements ::= 
    pred_statement:a
           {: RESULT = a; :}
	   ;

pred_statement ::=
    pred_statement_expression:a 
           {: Expr a1 = (Expr)a.get(0);
	      Expr a2 = (Expr)a.get(1);
	      List l = new TypedList(new LinkedList(), Stmt.class, false);


	       FlagAnnotations fl = new FlagAnnotations(); 
               fl.classicFlags(Flags.NONE);
               fl.annotations(new TypedList(new LinkedList(), AnnotationElem.class, false));
               List vds = parser.variableDeclarators(new JL5Name(parser, parser.pos(a), "TreeSet").toType(),
						     new VarDeclarator(parser.pos(a),
                            			                       "quantList"), 
						     fl); 

 	      Expr assign = parser.nf.Assign(parser.pos(a, a), 
	                                    new JL5Name(parser, parser.pos(a), "quantList").toExpr(), 
	      				    Assign.ASSIGN, 		
	      				    a1);
	      Stmt assignStmt = parser.nf.Eval(parser.pos(assign, assign), assign);
	      l.addAll(vds);
	      l.add(assignStmt); 
	      l.add(parser.nf.JL5Return(parser.pos(a, a), a2));
	      RESULT = l;
	   :}
	   ;

pred_statement_expression ::=
    pred_expression:a 
           {:  RESULT = a;  :}
    	   ;

pred_expression ::=
        ALL:a name:b COLON:c primary_no_new_array:d OR:e conditional_expression:f
       	   {: List l = new TypedList(new LinkedList(), Expr.class, false);
              l.add(d);
	      l.add(f);
              RESULT = l;
           :} 
	   ;       
