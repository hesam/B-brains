include "../../jl5/parse/jl5_ppg.cup"

package polyglot.ext.esj.parse;

import java.util.*;

import polyglot.ext.esj.types.ESJTypeSystem;
import polyglot.ext.esj.ast.*;
import polyglot.ext.jl5.ast.*;
import polyglot.ext.jl5.parse.*;

parser Grm extends polyglot.ext.jl5.parse.Grm {:
    public final ESJTypeSystem ts;
    public final ESJNodeFactory nf;

    public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = (ESJTypeSystem) t;
        nf = (ESJNodeFactory) n;
    }

    // define separate methods for each universal/existential expressions
    // also define relational-logic counterparts, to be used by external solvers...
    public List<JL5MethodDecl> defineESJExtraMethods(JL5MethodDecl methodDecl) throws Exception {
              List extraMtds = new TypedList(new LinkedList(), ClassMember.class, false);

	      // find the pred_expression subexprs within the body and mark them	    
	      List predExprs = getPredExprsWithinBody(methodDecl);

	      for (ESJQuantifyExpr a : (List<ESJQuantifyExpr>)predExprs) { 
	          a.parentMethod(methodDecl);
    	      	  String quantMtdId = a.id();	  
    	      	  boolean quantKind = a.quantKind();
	      	  String quantVarN = a.quantVar();
	      	  Expr quantList = a.quantListExpr();
	      	  Expr quantExpr = a.quantClauseExpr().expr();
	      	  List extraMtdBody = new TypedList(new LinkedList(), Stmt.class, false);

		  System.out.println(quantList);
		  System.out.println(quantList.type());
	      
		  FlagAnnotations fl = new FlagAnnotations(); 
              	  fl.classicFlags(Flags.NONE);
              	  fl.annotations(new TypedList(new LinkedList(), AnnotationElem.class, false));
	      	  List quantClauseStmts = new TypedList(new LinkedList(), Stmt.class, false);
	      	  VarDeclarator quantVar = new VarDeclarator(null, quantVarN);
	      	  List quantVarD = this.variableDeclarators(nf.CanonicalTypeNode(null, this.ts.Int()), quantVar, fl);
	      	  Expr quantMainIfExpr = quantKind ? nf.Unary(null, Unary.NOT, quantExpr) : quantExpr;
	      	  Stmt quantMainStmt = nf.JL5If(null, quantMainIfExpr, 
	               nf.JL5Return(null, nf.BooleanLit(null, !quantKind)), null);
	          quantClauseStmts.add(quantMainStmt);	    
	      	  Stmt forLoopBody = nf.Block(null, quantClauseStmts);
	      	  Stmt forLoop = nf.ExtendedFor(null,quantVarD, quantList, quantMainStmt);
	      	  extraMtdBody.add(forLoop);
	      	  extraMtdBody.add(nf.JL5Return(null, nf.BooleanLit(null, quantKind)));
	      	  Block extraMtdBlock = nf.Block(null, extraMtdBody);
	      	  JL5MethodDecl extraMtd = nf.ESJPredMethodDecl(null, fl,
	                                          nf.CanonicalTypeNode(null,ts.Boolean()), 
						  methodDecl.name() + "_" + quantMtdId, 
						  methodDecl.formals(), 
						  new TypedList(new LinkedList(), TypeNode.class, false), 
						  extraMtdBlock);
                  extraMtds.add(extraMtd);
             }
	     return extraMtds;
    }

    public List getPredExprsWithinBody(JL5MethodDecl methodDecl) {
	      List predSubExprs = new TypedList(new LinkedList(), ESJQuantifyExpr.class, false);
	      Expr fullExpr = ((Return)(methodDecl.body().statements().get(0))).expr();
	      getPredExprsWithinBodyHelper(fullExpr,predSubExprs);	      
	      return predSubExprs;
     }

     public void getPredExprsWithinBodyHelper(Expr n,List predSubExprs) {
     	    if (n instanceof Binary) {
	          getPredExprsWithinBodyHelper(((Binary)n).left(),predSubExprs);
	          getPredExprsWithinBodyHelper(((Binary)n).right(),predSubExprs);
	    } else if (n instanceof ESJQuantifyExpr) {
	          predSubExprs.add(n);
	    }
     }

:};

terminal Token PREDICATE;
terminal Token SOME;
terminal Token ALL;
terminal Token ESJAND;
terminal Token ESJOR;

non terminal JL5MethodDecl pred_method_header;
non terminal List pred_method_declaration;
non terminal Block pred_method_body, pred_block;
non terminal List pred_block_statements;
non terminal Return pred_statement;
non terminal ESJQuantifyExpr pred_expression;
non terminal Expr equality_or_pred_expression, expression_w_pred, and_expression_w_pred, quant_list_expr;

start with goal;

// Here begins the ESJ grammar extensions and modifications

extend class_member_declaration ::=
        pred_method_declaration:a 
	   {: RESULT = a; :}
	   ;

pred_method_declaration ::=
        pred_method_header:a pred_method_body:b 
	   {: JL5MethodDecl mainMtdDecl = (JL5MethodDecl) a.body(b);
              List l = new TypedList(new LinkedList(), ClassMember.class, false);
              l.add(mainMtdDecl);
	      l.addAll(parser.defineESJExtraMethods(mainMtdDecl));
              RESULT = l; 
	   :}
	   ;


pred_method_header ::=
        PREDICATE:z modifiers_or_annotations_opt:a BOOLEAN:b IDENTIFIER:c LPAREN 
                formal_parameter_list_opt:d RPAREN:g dims_opt:e throws_opt:f
            {: RESULT = parser.nf.JL5MethodDecl(null, a, parser.array(parser.nf.CanonicalTypeNode(null, parser.ts.Boolean()), e.intValue()), c.getIdentifier(), d, f, null, new TypedList(new LinkedList(), TypeNode.class, false)); 
            :}
    	    ;

pred_method_body ::=
        pred_block:a 
	   {:  RESULT = a;  :}
	   ;

pred_block ::=
        LBRACE:n pred_block_statements:a RBRACE:d 
           {: RESULT = parser.nf.Block(parser.pos(n, d), a); :}
	   ;

pred_block_statements ::= 
        pred_statement:a
           {: List l = new TypedList(new LinkedList(), Stmt.class, false);
              l.add(a);
              RESULT = l; 
	   :}
	   ;

pred_statement ::=
        expression_w_pred:a 
	   {: RESULT = parser.nf.JL5Return(parser.pos(a), a); :}
	   ;

expression_w_pred ::=
        and_expression_w_pred:a 
           {:  RESULT = a;  :}
     |  expression_w_pred:a ESJOR and_expression_w_pred:b 
           {: RESULT = parser.nf.Binary(null, a, Binary.COND_OR, b); :}
	   ;

and_expression_w_pred ::=
        equality_or_pred_expression:a 
           {:  RESULT = a;  :}
     |  and_expression_w_pred:a ESJAND equality_or_pred_expression:b 
           {: RESULT = parser.nf.Binary(null, a, Binary.COND_AND, b); :}
	   ;

equality_or_pred_expression ::=
        pred_expression:a 
           {:  RESULT = a;  :}
     |  equality_expression:a 
           {:  RESULT = a;  :}
	   ;

pred_expression ::=
        ALL:a name:b COLON:c quant_list_expr:d OR:e conditional_expression:f
       	   {: RESULT = parser.nf.ESJQuantifyExpr(parser.pos(a),true,b.toString(),d,f); :} 
     |  SOME:a name:b COLON:c quant_list_expr:d OR:e conditional_expression:f
       	   {: RESULT = parser.nf.ESJQuantifyExpr(parser.pos(a),false,b.toString(),d,f); :} 
	   ;

quant_list_expr ::=	
        primary_no_new_array:a
           {:  RESULT = a;  :}
     |  INT:a
           {:  RESULT = parser.nf.ESJQuantifyTypeExpr(null,parser.nf.CanonicalTypeNode(null, parser.ts.typeForName("ESJInteger")));
	   :}
     |  name:a
           {:  RESULT = parser.nf.ESJQuantifyTypeExpr(null,parser.nf.CanonicalTypeNode(null, parser.ts.typeForName(a.toString())));
	   :}
	   ;