/* The following code was generated by JFlex 1.3.5 on 8/4/09 11:47 PM */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2001  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * This program is free software; you can redistribute it and/or modify    *
 * it under the terms of the GNU General Public License. See the file      *
 * COPYRIGHT for more information.                                         *
 *                                                                         *
 * This program is distributed in the hope that it will be useful,         *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
 * GNU General Public License for more details.                            *
 *                                                                         *
 * You should have received a copy of the GNU General Public License along *
 * with this program; if not, write to the Free Software Foundation, Inc., *
 * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA                 *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals, 
   because the input is read twice and the methods used to parse
   the numbers are not very fast. 
   For a production quality application (e.g. a Java compiler) 
   this could be optimized */

package polyglot.ext.esj.parse;

import java_cup.runtime.Symbol;
import polyglot.lex.*;
import polyglot.util.Position;
import polyglot.util.ErrorQueue;
import polyglot.util.ErrorInfo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 8/4/09 11:47 PM from the specification file
 * <tt>file:/Users/hesam/Desktop/Research/b-brains/java/ESJava/src/polyglot/ext/esj/parse/esj.flex</tt>
 */
public class Lexer_c implements Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRING = 1;
  final public static int YYINITIAL = 0;
  final public static int CHARLITERAL = 2;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\72"+
    "\1\24\1\0\1\6\1\102\1\76\1\25\1\57\1\60\1\5\1\100"+
    "\1\66\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\75"+
    "\1\65\1\71\1\67\1\70\1\74\1\0\3\14\1\103\1\22\1\20"+
    "\5\6\1\12\13\6\1\13\2\6\1\63\1\26\1\64\1\101\1\6"+
    "\1\0\1\27\1\30\1\34\1\46\1\37\1\50\1\53\1\43\1\44"+
    "\1\6\1\41\1\36\1\51\1\40\1\35\1\52\1\6\1\33\1\31"+
    "\1\32\1\45\1\54\1\55\1\47\1\42\1\56\1\61\1\77\1\62"+
    "\1\73\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6"+
    "\4\0\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0\23\7"+
    "\12\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0\4\7"+
    "\3\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6"+
    "\2\0\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0\3\6"+
    "\15\0\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7\7\0"+
    "\12\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7"+
    "\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0"+
    "\1\7\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6\13\7"+
    "\1\6\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0\1\6"+
    "\4\7\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0\1\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0\3\7"+
    "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6\14\0"+
    "\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0"+
    "\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6"+
    "\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0\2\7"+
    "\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7"+
    "\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0"+
    "\3\6\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7\1\0"+
    "\4\7\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6\4\0"+
    "\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7\22\0"+
    "\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6\4\0"+
    "\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6\4\0"+
    "\12\7\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0"+
    "\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0"+
    "\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6"+
    "\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0"+
    "\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0"+
    "\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7"+
    "\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0"+
    "\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0"+
    "\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6"+
    "\6\0\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0"+
    "\1\7\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0"+
    "\4\7\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6"+
    "\7\0\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6"+
    "\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6"+
    "\1\0\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6"+
    "\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\6"+
    "\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6"+
    "\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7"+
    "\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0"+
    "\12\7\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7"+
    "\4\0\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0"+
    "\234\6\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0"+
    "\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0"+
    "\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0"+
    "\7\6\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0"+
    "\4\7\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0"+
    "\15\7\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0"+
    "\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0"+
    "\5\6\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6"+
    "\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6"+
    "\5\0\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6"+
    "\225\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6"+
    "\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7"+
    "\20\0\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6"+
    "\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6"+
    "\4\0\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6"+
    "\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    68,   136,   204,   272,   204,   340,   408,   476,   544, 
      612,   680,   748,   204,   204,   816,   884,   952,  1020,  1088, 
     1156,  1224,  1292,  1360,  1428,  1496,  1564,  1632,  1700,  1768, 
     1836,   204,   204,   204,   204,   204,   204,   204,   204,  1904, 
     1972,  2040,  2108,   204,   204,   204,  2176,  2244,  2312,  2380, 
     2448,  2516,  2584,   204,   204,  2652,  2720,  2788,   204,  2856, 
     2924,  2992,   204,   204,  3060,  3128,   204,  3196,  3264,  3332, 
     3400,   204,  3468,  3536,   204,   204,   204,  3604,  3672,  3740, 
     3808,  3876,  3944,  4012,  4080,  4148,  4216,  4284,  4352,  4420, 
     4488,  4556,  4624,  4692,  4760,  4828,  4896,  4964,  5032,  5100, 
     5168,  5236,  5304,   476,  5372,  5440,  5508,  5576,  5644,  5712, 
     5780,  5848,  5916,  5984,  6052,  6120,  6188,   204,   204,  6256, 
      204,  6324,   204,   204,   204,   204,   204,   204,   204,   204, 
      204,   204,  6392,  6460,   204,   204,   204,   204,   204,   204, 
      204,   204,   204,  6528,  6596,  6664,  6732,  6800,  6868,  6936, 
     7004,  7072,  7140,  7208,   204,  7276,  7344,  7412,  7480,  7548, 
     7616,  7684,  7752,   476,  7820,  7888,  7956,  8024,  8092,  8160, 
     8228,  8296,  8364,  8432,  8500,   476,  8568,  8636,  8704,  8772, 
     8840,  8908,  8976,  9044,  9112,  9180,  9248,  9316,  9384,   476, 
     9452,  9520,  9588,  9656,  9724,  9792,  9860,   476,  9928,  9996, 
    10064, 10132, 10200, 10268, 10336, 10404, 10472, 10540, 10608,   204, 
    10676,   204,   204,  6596,   204, 10744,   204,   204,   204,   204, 
      204,   204,   204,   204, 10812,   204, 10880, 10948, 11016, 11084, 
    11152, 11220, 11288,   476, 11356, 11424,   476, 11492, 11560, 11628, 
    11696, 11764,   476, 11832,   476, 11900,   476, 11968, 12036, 12104, 
    12172,   476,   476,   476, 12240, 12308,   476, 12376, 12444, 12512, 
    12580, 12648, 12716, 12784, 12852, 12920, 12988, 13056, 13124, 13192, 
    13260,   476, 13328,   476, 13396,   204, 13464, 13532, 13600, 13668, 
    13736,   476, 13804, 13872, 13940, 14008,   476,   476, 14076, 14144, 
    14212, 14280,   476,   476, 14348,   476, 14416, 14484, 14552, 14620, 
    14688, 14756, 14824, 14892,   476,   476, 14960, 15028, 15096, 15164, 
    15232, 15300, 15368,   476, 15436, 15504, 15572, 15640,   476, 15708, 
      476, 15776, 15844,   476, 15912,   476,   476, 15980, 16048,   476, 
    16116, 16184,   476, 16252,   476, 16320, 16388, 16456, 16524, 16592, 
    16660,   476, 16728, 16796, 16864, 16932, 17000,   476, 17068, 17136, 
    17204, 17272,   476, 17340, 17408, 17476,   476,   476,   476, 17544, 
    17612,   476, 17680, 17748, 17816, 17884,   476,   476, 17952, 18020, 
      476, 18088, 18156, 18224, 18292, 18360,   476, 18428, 18496, 18564, 
    18632,   476, 18700,   476, 18768,   476,   476, 18836, 18904, 18972, 
    19040,   476,   476, 19108, 19176, 19244, 19312, 19380, 19448, 19516, 
      476, 19584, 19652, 19720, 19788, 19856, 19924, 19992, 20060, 20128, 
    20196, 20264, 20332, 20400, 20468, 20468, 20536, 20604, 20672, 20740, 
    20808, 20876
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\11\1\26\1\27\1\30\3\11\1\31\1\11\1\32"+
    "\1\11\1\33\1\11\1\34\1\35\1\36\1\37\1\11"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\11\1\64\1\65\1\66"+
    "\21\64\1\67\1\64\1\70\55\64\1\71\1\72\1\73"+
    "\22\71\1\4\1\74\55\71\106\0\1\6\105\0\1\75"+
    "\1\76\61\0\1\77\103\0\1\100\22\0\13\11\1\0"+
    "\1\11\4\0\30\11\24\0\1\11\10\0\1\101\1\102"+
    "\1\103\1\104\1\0\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\13\0\1\103\1\112\6\0\1\113\1\104\1\110"+
    "\32\0\1\113\10\0\2\13\1\103\2\0\3\13\1\110"+
    "\1\111\1\112\13\0\1\103\1\112\6\0\1\113\1\0"+
    "\1\110\32\0\1\113\10\0\2\111\3\0\3\111\107\0"+
    "\1\114\43\0\1\115\22\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\116\1\117\4\11\1\120\20\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\121\1\11"+
    "\1\122\4\11\1\123\14\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\124\2\11\1\125\4\11"+
    "\1\126\1\127\1\11\1\130\7\11\1\131\1\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\132"+
    "\7\11\1\133\13\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\134\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\135\5\11\1\136\1\137"+
    "\4\11\1\140\13\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\141\21\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\142\10\11\1\143"+
    "\7\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\144\7\11\1\145\5\11\1\146\11\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\147\7\11"+
    "\1\150\1\151\5\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\152\1\11\1\153\17\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\154\5\11"+
    "\1\155\1\156\5\11\1\157\12\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\160\3\11\1\161\11\11"+
    "\1\162\11\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\163\21\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\164\21\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\14\11\1\165\13\11"+
    "\24\0\1\11\67\0\1\166\103\0\1\167\1\170\102\0"+
    "\1\171\1\0\1\172\101\0\1\173\103\0\1\174\6\0"+
    "\1\175\74\0\1\176\7\0\1\177\73\0\1\200\10\0"+
    "\1\201\72\0\1\202\103\0\1\203\14\0\1\64\2\0"+
    "\21\64\1\0\1\64\1\0\55\64\2\0\1\66\101\0"+
    "\2\204\1\0\5\204\1\205\4\204\2\205\1\206\4\204"+
    "\1\207\1\210\1\211\1\204\1\212\1\204\1\213\1\214"+
    "\4\204\1\215\7\204\1\216\33\204\25\0\1\217\60\0"+
    "\1\73\101\0\2\204\1\0\5\204\1\220\4\204\2\220"+
    "\1\221\4\204\1\222\1\223\1\224\1\204\1\225\1\204"+
    "\1\226\1\227\4\204\1\230\7\204\1\231\33\204\1\75"+
    "\1\5\1\6\101\75\104\232\10\0\1\101\1\102\1\233"+
    "\2\0\1\105\1\106\1\107\1\110\1\111\1\112\13\0"+
    "\1\233\1\112\6\0\1\113\1\0\1\110\32\0\1\113"+
    "\10\0\2\102\3\0\3\102\1\110\1\111\1\112\14\0"+
    "\1\112\6\0\1\113\1\0\1\110\32\0\1\113\10\0"+
    "\1\234\1\235\2\0\5\235\1\0\1\235\4\0\2\235"+
    "\3\0\1\235\2\0\1\235\6\0\1\235\1\0\1\235"+
    "\32\0\1\235\10\0\1\236\1\102\1\233\2\0\3\236"+
    "\1\110\1\111\1\112\13\0\1\233\1\112\6\0\1\113"+
    "\1\0\1\110\32\0\1\113\10\0\1\107\1\102\1\233"+
    "\2\0\3\107\1\110\1\111\1\112\13\0\1\233\1\112"+
    "\6\0\1\113\1\0\1\110\32\0\1\113\10\0\1\237"+
    "\1\102\1\233\2\0\3\237\1\110\1\111\1\112\13\0"+
    "\1\233\1\112\6\0\1\113\1\0\1\110\32\0\1\113"+
    "\10\0\2\111\3\0\3\111\1\110\1\0\1\112\14\0"+
    "\1\112\6\0\1\113\1\0\1\110\32\0\1\113\10\0"+
    "\2\240\3\0\3\240\3\0\1\241\54\0\1\241\11\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\242\25\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\243"+
    "\25\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\244\20\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\245\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\246\21\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\247"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\250\3\11\1\251\23\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\22\11\1\252\5\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\253\16\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\254\21\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\23\11\1\255\4\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\256\12\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\257\12\11\1\260"+
    "\2\11\1\261\11\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\4\11\1\262\10\11\1\263\12\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\264"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\265\1\266\24\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\267\16\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\270\27\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\271\27\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\272\16\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\273\25\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\274\24\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\275\24\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\26\11"+
    "\1\276\1\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\7\11\1\277\20\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\300\1\301\24\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\23\11\1\302"+
    "\4\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\303\11\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\21\11\1\304\6\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\305\20\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\306"+
    "\23\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\307\21\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\310\16\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\311\22\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\312"+
    "\1\11\1\313\4\11\1\314\12\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\315\26\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\316"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\317\5\11\1\320\12\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\321\12\11\24\0"+
    "\1\11\67\0\1\322\1\323\102\0\1\324\24\0\1\206"+
    "\4\0\3\206\74\0\1\325\4\0\3\325\74\0\1\326"+
    "\4\0\3\326\5\0\1\327\66\0\1\330\4\0\3\330"+
    "\5\0\1\327\103\0\1\331\103\0\1\332\103\0\1\333"+
    "\103\0\1\334\103\0\1\335\103\0\1\336\103\0\1\337"+
    "\103\0\1\340\56\0\5\232\1\341\76\232\10\0\1\234"+
    "\1\235\1\342\1\0\5\235\1\0\1\235\4\0\2\235"+
    "\3\0\1\235\1\0\1\342\1\235\6\0\1\235\1\0"+
    "\1\235\32\0\1\235\10\0\2\343\1\342\1\0\5\343"+
    "\1\0\1\343\4\0\2\343\3\0\1\343\1\0\1\342"+
    "\1\343\6\0\1\343\1\0\1\343\32\0\1\343\10\0"+
    "\1\344\1\102\1\233\2\0\3\344\1\110\1\111\1\112"+
    "\13\0\1\233\1\112\6\0\1\113\1\0\1\110\32\0"+
    "\1\113\10\0\1\345\1\102\1\233\2\0\3\345\1\110"+
    "\1\111\1\112\13\0\1\233\1\112\6\0\1\113\1\0"+
    "\1\110\32\0\1\113\10\0\2\240\3\0\3\240\1\110"+
    "\25\0\1\113\1\0\1\110\32\0\1\113\10\0\2\240"+
    "\3\0\3\240\72\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\346\24\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\347\17\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\350\27\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\351\20\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\352"+
    "\17\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\353\24\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\354\12\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\355\17\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\356"+
    "\22\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\357\23\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\360\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\361\24\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\362"+
    "\16\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\363\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\364\21\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\365\25\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\366"+
    "\11\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\367\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\370\22\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\371\1\372\24\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\373\25\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\374\23\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\24\11\1\375\3\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\376\17\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\377\17\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u0100\12\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\7\11\1\u0101\20\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u0102\24\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0103\17\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\u0104\1\u0105\20\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\u0106\26\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\u0107\27\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\u0108\25\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u0109\27\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\u010a\27\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\u010b\15\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u010c\24\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\17\11"+
    "\1\u010d\10\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\25\11\1\u010e\2\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\7\11\1\u010f\20\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\u0110\21\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\1\u0111"+
    "\27\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\17\11\1\u0112\10\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\u0113\20\11\24\0\1\11\67\0"+
    "\1\u0114\41\0\1\327\56\0\4\232\1\6\1\341\76\232"+
    "\10\0\2\u0115\1\342\1\0\5\u0115\1\0\1\u0115\4\0"+
    "\2\u0115\3\0\1\u0115\1\0\1\342\1\u0115\6\0\1\u0115"+
    "\1\0\1\u0115\32\0\1\u0115\10\0\1\u0116\1\102\1\233"+
    "\2\0\3\u0116\1\110\1\111\1\112\13\0\1\233\1\112"+
    "\6\0\1\113\1\0\1\110\32\0\1\113\10\0\1\u0117"+
    "\1\102\1\233\2\0\3\u0117\1\110\1\111\1\112\13\0"+
    "\1\233\1\112\6\0\1\113\1\0\1\110\32\0\1\113"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\u0118\23\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"+
    "\1\u0119\23\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u011a\15\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\u011b\17\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u011c\12\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\u011d\22\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\14\11\1\u011e\13\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\u011f\24\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\u0120\23\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\u0121\22\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u0122\25\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\26\11\1\u0123\1\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\u0124\23\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\14\11"+
    "\1\u0125\13\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u0126\24\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\u0127\12\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\u0128\25\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\u0129\16\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\25\11\1\u012a\2\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\u012b\27\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u012c\23\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\u012d"+
    "\23\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u012e\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\u012f\20\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\u0130\11\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u0131"+
    "\17\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\u0132\24\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\u0133\20\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u0134\27\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u0135\17\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\u0136\12\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u0137\27\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0138\12\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\u0139\24\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u013a"+
    "\17\11\24\0\1\11\10\0\2\u013b\1\342\1\0\5\u013b"+
    "\1\0\1\u013b\4\0\2\u013b\3\0\1\u013b\1\0\1\342"+
    "\1\u013b\6\0\1\u013b\1\0\1\u013b\32\0\1\u013b\10\0"+
    "\1\u013c\1\102\1\233\2\0\3\u013c\1\110\1\111\1\112"+
    "\13\0\1\233\1\112\6\0\1\113\1\0\1\110\32\0"+
    "\1\113\10\0\1\u013d\1\102\1\233\2\0\3\u013d\1\110"+
    "\1\111\1\112\13\0\1\233\1\112\6\0\1\113\1\0"+
    "\1\110\32\0\1\113\6\0\13\11\1\0\1\11\4\0"+
    "\1\u013e\27\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u013f\24\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\u0140\27\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u0141\22\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u0142"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\u0143\23\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\14\11\1\u0144\13\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u0145\12\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u0146"+
    "\25\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u0147\16\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\u0148\16\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\17\11\1\u0149\10\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u014a"+
    "\17\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u014b\16\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\21\11\1\u014c\6\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\u014d\24\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\22\11\1\u014e"+
    "\5\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u014f\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\u0150\20\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\u0151\20\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\24\11\1\u0152"+
    "\3\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\u0153\22\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u0154\22\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\u0155\24\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\u0156"+
    "\22\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u0157\12\11\24\0\1\11\10\0\2\u0158\1\342"+
    "\1\0\5\u0158\1\0\1\u0158\4\0\2\u0158\3\0\1\u0158"+
    "\1\0\1\342\1\u0158\6\0\1\u0158\1\0\1\u0158\32\0"+
    "\1\u0158\10\0\1\u0159\1\102\1\233\2\0\3\u0159\1\110"+
    "\1\111\1\112\13\0\1\233\1\112\6\0\1\113\1\0"+
    "\1\110\32\0\1\113\10\0\1\u015a\1\102\1\233\2\0"+
    "\3\u015a\1\110\1\111\1\112\13\0\1\233\1\112\6\0"+
    "\1\113\1\0\1\110\32\0\1\113\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u015b\22\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u015c\16\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\21\11\1\u015d"+
    "\6\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\u015e\21\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u015f\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\u0160\11\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u0161"+
    "\25\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\u0162\22\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\u0163\27\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\u0164\17\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u0165\24\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\13\11"+
    "\1\u0166\14\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u0167\17\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\u0168\24\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u0169\27\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u016a"+
    "\17\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\u016b\20\11\24\0\1\11\10\0\2\u016c\1\342"+
    "\1\0\5\u016c\1\0\1\u016c\4\0\2\u016c\3\0\1\u016c"+
    "\1\0\1\342\1\u016c\6\0\1\u016c\1\0\1\u016c\32\0"+
    "\1\u016c\10\0\1\u016d\1\102\1\233\2\0\3\u016d\1\110"+
    "\1\111\1\112\13\0\1\233\1\112\6\0\1\113\1\0"+
    "\1\110\32\0\1\113\10\0\1\u016e\1\102\1\233\2\0"+
    "\3\u016e\1\110\1\111\1\112\13\0\1\233\1\112\6\0"+
    "\1\113\1\0\1\110\32\0\1\113\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u016f\24\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\23\11\1\u0170\4\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u0171"+
    "\16\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u0172\16\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u0173\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u0174\17\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\u0175"+
    "\22\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u0176\16\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u0177\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\u0178\24\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u0179"+
    "\17\11\24\0\1\11\10\0\2\u017a\1\342\1\0\5\u017a"+
    "\1\0\1\u017a\4\0\2\u017a\3\0\1\u017a\1\0\1\342"+
    "\1\u017a\6\0\1\u017a\1\0\1\u017a\32\0\1\u017a\10\0"+
    "\1\u017b\1\102\1\233\2\0\3\u017b\1\110\1\111\1\112"+
    "\13\0\1\233\1\112\6\0\1\113\1\0\1\110\32\0"+
    "\1\113\10\0\1\u017c\1\102\1\233\2\0\3\u017c\1\110"+
    "\1\111\1\112\13\0\1\233\1\112\6\0\1\113\1\0"+
    "\1\110\32\0\1\113\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u017d\12\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u017e\24\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u017f\21\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u0180"+
    "\17\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\u0181\24\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\17\11\1\u0182\10\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u0183\17\11\24\0"+
    "\1\11\10\0\2\u0184\1\342\1\0\5\u0184\1\0\1\u0184"+
    "\4\0\2\u0184\3\0\1\u0184\1\0\1\342\1\u0184\6\0"+
    "\1\u0184\1\0\1\u0184\32\0\1\u0184\10\0\1\u0185\1\102"+
    "\1\233\2\0\3\u0185\1\110\1\111\1\112\13\0\1\233"+
    "\1\112\6\0\1\113\1\0\1\110\32\0\1\113\10\0"+
    "\1\u0186\1\102\1\233\2\0\3\u0186\1\110\1\111\1\112"+
    "\13\0\1\233\1\112\6\0\1\113\1\0\1\110\32\0"+
    "\1\113\6\0\13\11\1\0\1\11\4\0\27\11\1\u0187"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\21\11"+
    "\1\u0188\6\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u0189\25\11\24\0\1\11\10\0\2\u018a"+
    "\1\342\1\0\5\u018a\1\0\1\u018a\4\0\2\u018a\3\0"+
    "\1\u018a\1\0\1\342\1\u018a\6\0\1\u018a\1\0\1\u018a"+
    "\32\0\1\u018a\10\0\1\u018b\1\102\1\233\2\0\3\u018b"+
    "\1\110\1\111\1\112\13\0\1\233\1\112\6\0\1\113"+
    "\1\0\1\110\32\0\1\113\10\0\1\u018c\1\102\1\233"+
    "\2\0\3\u018c\1\110\1\111\1\112\13\0\1\233\1\112"+
    "\6\0\1\113\1\0\1\110\32\0\1\113\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\u018d\17\11\24\0\1\11"+
    "\10\0\2\u018e\1\342\1\0\5\u018e\1\0\1\u018e\4\0"+
    "\2\u018e\3\0\1\u018e\1\0\1\342\1\u018e\6\0\1\u018e"+
    "\1\0\1\u018e\32\0\1\u018e\10\0\1\u018f\1\102\1\233"+
    "\2\0\3\u018f\1\110\1\111\1\112\13\0\1\233\1\112"+
    "\6\0\1\113\1\0\1\110\32\0\1\113\10\0\1\u0190"+
    "\1\102\1\233\2\0\3\u0190\1\110\1\111\1\112\13\0"+
    "\1\233\1\112\6\0\1\113\1\0\1\110\32\0\1\113"+
    "\6\0\13\11\1\0\1\11\4\0\17\11\1\u0191\10\11"+
    "\24\0\1\11\10\0\2\u0192\1\342\1\0\5\u0192\1\0"+
    "\1\u0192\4\0\2\u0192\3\0\1\u0192\1\0\1\342\1\u0192"+
    "\6\0\1\u0192\1\0\1\u0192\32\0\1\u0192\10\0\1\u0193"+
    "\1\102\1\233\2\0\3\u0193\1\110\1\111\1\112\13\0"+
    "\1\233\1\112\6\0\1\113\1\0\1\110\32\0\1\113"+
    "\10\0\1\u0194\1\102\1\233\2\0\3\u0194\1\110\1\111"+
    "\1\112\13\0\1\233\1\112\6\0\1\113\1\0\1\110"+
    "\32\0\1\113\10\0\2\u0195\1\342\1\0\5\u0195\1\0"+
    "\1\u0195\4\0\2\u0195\3\0\1\u0195\1\0\1\342\1\u0195"+
    "\6\0\1\u0195\1\0\1\u0195\32\0\1\u0195\10\0\1\u0196"+
    "\1\102\1\233\2\0\3\u0196\1\110\1\111\1\112\13\0"+
    "\1\233\1\112\6\0\1\113\1\0\1\110\32\0\1\113"+
    "\10\0\1\u0197\1\102\1\233\2\0\3\u0197\1\110\1\111"+
    "\1\112\13\0\1\233\1\112\6\0\1\113\1\0\1\110"+
    "\32\0\1\113\10\0\2\u0198\1\342\1\0\5\u0198\1\0"+
    "\1\u0198\4\0\2\u0198\3\0\1\u0198\1\0\1\342\1\u0198"+
    "\6\0\1\u0198\1\0\1\u0198\32\0\1\u0198\10\0\1\u0199"+
    "\1\102\1\233\2\0\3\u0199\1\110\1\111\1\112\13\0"+
    "\1\233\1\112\6\0\1\113\1\0\1\110\32\0\1\113"+
    "\10\0\1\u019a\1\102\1\233\2\0\3\u019a\1\110\1\111"+
    "\1\112\13\0\1\233\1\112\6\0\1\113\1\0\1\110"+
    "\32\0\1\113\10\0\2\u019b\1\342\1\0\5\u019b\1\0"+
    "\1\u019b\4\0\2\u019b\3\0\1\u019b\1\0\1\342\1\u019b"+
    "\6\0\1\u019b\1\0\1\u019b\32\0\1\u019b\10\0\1\u019c"+
    "\1\102\1\233\2\0\3\u019c\1\110\1\111\1\112\13\0"+
    "\1\233\1\112\6\0\1\113\1\0\1\110\32\0\1\113"+
    "\10\0\1\u019d\1\102\1\233\2\0\3\u019d\1\110\1\111"+
    "\1\112\13\0\1\233\1\112\6\0\1\113\1\0\1\110"+
    "\32\0\1\113\10\0\2\u019e\1\342\1\0\5\u019e\1\0"+
    "\1\u019e\4\0\2\u019e\3\0\1\u019e\1\0\1\342\1\u019e"+
    "\6\0\1\u019e\1\0\1\u019e\32\0\1\u019e\10\0\1\u019f"+
    "\1\102\1\233\2\0\3\u019f\1\110\1\111\1\112\13\0"+
    "\1\233\1\112\6\0\1\113\1\0\1\110\32\0\1\113"+
    "\10\0\1\u01a0\1\102\1\233\2\0\3\u01a0\1\110\1\111"+
    "\1\112\13\0\1\233\1\112\6\0\1\113\1\0\1\110"+
    "\32\0\1\113\10\0\2\u01a1\1\342\1\0\5\u01a1\1\0"+
    "\1\u01a1\4\0\2\u01a1\3\0\1\u01a1\1\0\1\342\1\u01a1"+
    "\6\0\1\u01a1\1\0\1\u01a1\32\0\1\u01a1\10\0\1\u01a2"+
    "\1\102\1\233\2\0\3\u01a2\1\110\1\111\1\112\13\0"+
    "\1\233\1\112\6\0\1\113\1\0\1\110\32\0\1\113"+
    "\12\0\1\342\23\0\1\342\55\0\1\u01a3\1\102\1\233"+
    "\2\0\3\u01a3\1\110\1\111\1\112\13\0\1\233\1\112"+
    "\6\0\1\113\1\0\1\110\32\0\1\113\10\0\1\u01a4"+
    "\1\102\1\233\2\0\3\u01a4\1\110\1\111\1\112\13\0"+
    "\1\233\1\112\6\0\1\113\1\0\1\110\32\0\1\113"+
    "\10\0\1\u01a5\1\102\1\233\2\0\3\u01a5\1\110\1\111"+
    "\1\112\13\0\1\233\1\112\6\0\1\113\1\0\1\110"+
    "\32\0\1\113\10\0\1\u01a6\1\102\1\233\2\0\3\u01a6"+
    "\1\110\1\111\1\112\13\0\1\233\1\112\6\0\1\113"+
    "\1\0\1\110\32\0\1\113\10\0\2\102\1\233\2\0"+
    "\3\102\1\110\1\111\1\112\13\0\1\233\1\112\6\0"+
    "\1\113\1\0\1\110\32\0\1\113";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     9,  9,  9,  9,  9,  9,  9,  1,  1,  1,  1,  9,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  9,  9,  1,  1,  1,  9,  1,  0,  0,  9,  9, 
     1,  1,  9,  0,  1,  1,  1,  9,  1,  0,  9,  9,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  9,  1,  9,  1,  9,  9,  9,  9,  9,  9, 
     9,  9,  9,  9,  1,  1,  9,  9,  9,  9,  9,  9,  9,  9,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  1,  1,  1,  1,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  1,  9,  9,  0,  9,  0,  9,  9,  9,  9,  9,  9,  9,  9, 
     0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  0,  1,  1, 
     1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1, 
     0,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    StringBuffer sb = new StringBuffer();
    String file;
    ErrorQueue eq;

    public Lexer_c(java.io.InputStream in, String file, ErrorQueue eq) {
        this(new java.io.BufferedReader(new java.io.InputStreamReader(in)),
             file, eq);
    }
    
    public Lexer_c(java.io.Reader reader, String file, ErrorQueue eq) {
        this(new EscapedUnicodeReader(reader));
        this.file = file;
        this.eq = eq;
    }

    public String file() {
        return file;
    }

    private Position pos() {
        return new Position(file, yyline+1, yycolumn);
    }

    private Token key(int symbol) {
        return new Keyword(pos(), yytext(), symbol);
    }

    private Token op(int symbol) {
        return new Operator(pos(), yytext(), symbol);
    }

    private Token id() {
        return new Identifier(pos(), yytext(), sym.IDENTIFIER);
    }

    private Token int_token(String s, int radix) {
        long x = parseLong(s, radix);
        return new IntegerLiteral(pos(), (int) x, sym.INTEGER_LITERAL);
    }

    private Token long_token(String s, int radix) {
        long x = parseLong(s, radix);
        return new LongLiteral(pos(), x, sym.LONG_LITERAL);
    }

    private Token float_token(String s) {
        float x = Float.valueOf(s).floatValue();
        return new FloatLiteral(pos(), x, sym.FLOAT_LITERAL);
    }

    private Token double_token(String s) {
        double x = Double.valueOf(s).doubleValue();
        return new DoubleLiteral(pos(), x, sym.DOUBLE_LITERAL);
    }
    
    private Token char_token(char x) {
        return new CharacterLiteral(pos(), x, sym.CHARACTER_LITERAL);
    }

    private Token boolean_token(boolean x) {
        return new BooleanLiteral(pos(), x, sym.BOOLEAN_LITERAL);
    }

    private Token null_token() {
        return new NullLiteral(pos(), sym.NULL_LITERAL);
    }

    private Token string_token() {
        return new StringLiteral(pos(), sb.toString(), sym.STRING_LITERAL);
    }

  /* assumes correct representation of a long value for 
     specified radix in String s */
  private long parseLong(String s, int radix) {
    int max = s.length();
    long result = 0;
    long digit;

    for (int i = 0; i < max; i++) {
      digit = Character.digit(s.charAt(i), radix);
      result *= radix;
      result += digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer_c(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer_c(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[20944];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1782) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 376: 
          {  return key(sym.VOLATILE);  }
        case 423: break;
        case 370: 
          {  return key(sym.CONTINUE);  }
        case 424: break;
        case 367: 
          {  return key(sym.STRICTFP);  }
        case 425: break;
        case 366: 
          {  return key(sym.ABSTRACT);  }
        case 426: break;
        case 361: 
          {  return key(sym.PRIVATE);  }
        case 427: break;
        case 358: 
          {  return key(sym.PACKAGE);  }
        case 428: break;
        case 357: 
          {  return key(sym.FINALLY);  }
        case 429: break;
        case 356: 
          {  return key(sym.DEFAULT);  }
        case 430: break;
        case 352: 
          {  return key(sym.EXTENDS);  }
        case 431: break;
        case 347: 
          {  return key(sym.BOOLEAN);  }
        case 432: break;
        case 210: 
          {  return op(sym.URSHIFT);  }
        case 433: break;
        case 51: 
          {  sb.append( yytext() );  }
        case 434: break;
        case 31: 
          {  return op(sym.LPAREN);  }
        case 435: break;
        case 32: 
          {  return op(sym.RPAREN);  }
        case 436: break;
        case 33: 
          {  return op(sym.LBRACE);  }
        case 437: break;
        case 34: 
          {  return op(sym.RBRACE);  }
        case 438: break;
        case 35: 
          {  return op(sym.LBRACK);  }
        case 439: break;
        case 36: 
          {  return op(sym.RBRACK);  }
        case 440: break;
        case 63: 
          {  return op(sym.MULTEQ);  }
        case 441: break;
        case 76: 
          {  return op(sym.MINUSEQ);  }
        case 442: break;
        case 103: 
          {  return key(sym.IF);  }
        case 443: break;
        case 105: 
          {  return key(sym.DO);  }
        case 444: break;
        case 119: 
          {  return op(sym.RSHIFT);  }
        case 445: break;
        case 121: 
          {  return op(sym.LSHIFT);  }
        case 446: break;
        case 124: 
          {  return op(sym.ANDAND);  }
        case 447: break;
        case 127: 
          {  return op(sym.PLUSEQ);  }
        case 448: break;
        case 154: 
          {  return long_token(yytext().substring(0,yylength()-1), 8);  }
        case 449: break;
        case 218: 
          {  yybegin(YYINITIAL); return char_token('\\');  }
        case 450: break;
        case 155: 
        case 156: 
        case 226: 
        case 276: 
        case 314: 
        case 343: 
        case 363: 
        case 377: 
        case 387: 
          {  return int_token(yytext().substring(2), 16);  }
        case 451: break;
        case 341: 
          {  return key(sym.PUBLIC);  }
        case 452: break;
        case 334: 
          {  return key(sym.DOUBLE);  }
        case 453: break;
        case 332: 
          {  return key(sym.IMPORT);  }
        case 454: break;
        case 329: 
          {  return key(sym.NATIVE);  }
        case 455: break;
        case 326: 
          {  return key(sym.RETURN);  }
        case 456: break;
        case 325: 
          {  return key(sym.THROWS);  }
        case 457: break;
        case 323: 
          {  return key(sym.SWITCH);  }
        case 458: break;
        case 320: 
          {  return key(sym.STATIC);  }
        case 459: break;
        case 318: 
          {  return key(sym.ASSERT);  }
        case 460: break;
        case 313: 
          {  return key(sym.WHILE);  }
        case 461: break;
        case 306: 
          {  return key(sym.FINAL);  }
        case 462: break;
        case 305: 
          {  return key(sym.FLOAT);  }
        case 463: break;
        case 295: 
          {  return key(sym.CLASS);  }
        case 464: break;
        case 293: 
          {  return key(sym.CONST);  }
        case 465: break;
        case 292: 
          {  return key(sym.CATCH);  }
        case 466: break;
        case 290: 
          {  return key(sym.THROW);  }
        case 467: break;
        case 287: 
          {  return key(sym.SUPER);  }
        case 468: break;
        case 286: 
          {  return key(sym.SHORT);  }
        case 469: break;
        case 281: 
          {  return key(sym.BREAK);  }
        case 470: break;
        case 62: 
          {  return op(sym.DIVEQ);  }
        case 471: break;
        case 48: 
          {  return op(sym.PLUS);  }
        case 472: break;
        case 45: 
          {  return op(sym.COLON);  }
        case 473: break;
        case 43: 
          {  return op(sym.COMP);  }
        case 474: break;
        case 38: 
          {  return op(sym.COMMA);  }
        case 475: break;
        case 12: 
          {  return op(sym.MINUS);  }
        case 476: break;
        case 7: 
          {  return op(sym.MULT);  }
        case 477: break;
        case 117: 
          {  return op(sym.EQEQ);  }
        case 478: break;
        case 118: 
          {  return op(sym.GTEQ);  }
        case 479: break;
        case 120: 
          {  return op(sym.LTEQ);  }
        case 480: break;
        case 122: 
          {  return op(sym.NOTEQ);  }
        case 481: break;
        case 123: 
          {  return op(sym.ANDEQ);  }
        case 482: break;
        case 125: 
          {  return op(sym.OREQ);  }
        case 483: break;
        case 126: 
          {  return op(sym.OROR);  }
        case 484: break;
        case 129: 
          {  return op(sym.XOREQ);  }
        case 485: break;
        case 130: 
          {  return op(sym.MODEQ);  }
        case 486: break;
        case 4: 
        case 5: 
          {  /* ignore */  }
        case 487: break;
        case 65: 
        case 72: 
        case 159: 
        case 415: 
        case 417: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
          {  return double_token(yytext());  }
        case 488: break;
        case 242: 
          {  return boolean_token(true);  }
        case 489: break;
        case 9: 
        case 10: 
          {  return int_token(yytext(), 10);  }
        case 490: break;
        case 64: 
        case 68: 
        case 69: 
        case 70: 
        case 157: 
        case 158: 
        case 227: 
        case 228: 
        case 277: 
        case 278: 
        case 315: 
        case 316: 
        case 344: 
        case 345: 
        case 364: 
        case 365: 
        case 378: 
        case 379: 
        case 388: 
        case 389: 
        case 394: 
        case 395: 
        case 398: 
        case 399: 
        case 402: 
        case 403: 
        case 405: 
        case 406: 
        case 408: 
        case 409: 
        case 411: 
        case 412: 
        case 414: 
          {  return int_token(yytext(), 8);  }
        case 491: break;
        case 392: 
          {  return key(sym.IMPLEMENTS);  }
        case 492: break;
        case 391: 
          {  return key(sym.INSTANCEOF);  }
        case 493: break;
        case 386: 
          {  return key(sym.PREDICATE);  }
        case 494: break;
        case 385: 
          {  return key(sym.PROTECTED);  }
        case 495: break;
        case 383: 
          {  return key(sym.INTERFACE);  }
        case 496: break;
        case 381: 
          {  return key(sym.TRANSIENT);  }
        case 497: break;
        case 275: 
          {  return op(sym.URSHIFTEQ);  }
        case 498: break;
        case 211: 
          {  return op(sym.LSHIFTEQ);  }
        case 499: break;
        case 209: 
          {  return op(sym.RSHIFTEQ);  }
        case 500: break;
        case 44: 
          {  return op(sym.QUESTION);  }
        case 501: break;
        case 37: 
          {  return op(sym.SEMICOLON);  }
        case 502: break;
        case 128: 
          {  return op(sym.PLUSPLUS);  }
        case 503: break;
        case 256: 
          {  return null_token();  }
        case 504: break;
        case 214: 
          {  yybegin(YYINITIAL);
				    long val = parseLong(yytext().substring(1,yylength()-1), 8);
			            return char_token((char)val);  }
        case 505: break;
        case 223: 
          {  yybegin(YYINITIAL); return char_token('\f'); }
        case 506: break;
        case 222: 
          {  yybegin(YYINITIAL); return char_token('\n'); }
        case 507: break;
        case 221: 
          {  yybegin(YYINITIAL); return char_token('\r'); }
        case 508: break;
        case 220: 
          {  yybegin(YYINITIAL); return char_token('\t'); }
        case 509: break;
        case 219: 
          {  yybegin(YYINITIAL); return char_token('\b'); }
        case 510: break;
        case 217: 
          {  yybegin(YYINITIAL); return char_token('\''); }
        case 511: break;
        case 216: 
          {  yybegin(YYINITIAL); return char_token('\"'); }
        case 512: break;
        case 54: 
          {  yybegin(YYINITIAL); return string_token();  }
        case 513: break;
        case 52: 
        case 53: 
          {  eq.enqueue(ErrorInfo.LEXICAL_ERROR,
					      "Unterminated string at end of line",
					      pos());  }
        case 514: break;
        case 225: 
          {  return long_token(yytext().substring(2,yylength()-1), 16);  }
        case 515: break;
        case 66: 
          {  return long_token(yytext().substring(0,yylength()-1), 10);  }
        case 516: break;
        case 142: 
          {  yybegin(YYINITIAL); return char_token(yytext().charAt(0));  }
        case 517: break;
        case 304: 
          {  return boolean_token(false);  }
        case 518: break;
        case 14: 
          {  yybegin(CHARLITERAL);  }
        case 519: break;
        case 400: 
          {  return key(sym.SYNCHRONIZED);  }
        case 520: break;
        case 71: 
          {  return float_token(yytext().substring(0,yylength()-1));  }
        case 521: break;
        case 74: 
          {  return double_token(yytext().substring(0,yylength()-1));  }
        case 522: break;
        case 75: 
          {  return op(sym.MINUSMINUS);  }
        case 523: break;
        case 273: 
          {  return key(sym.VOID);  }
        case 524: break;
        case 271: 
          {  return key(sym.GOTO);  }
        case 525: break;
        case 253: 
          {  return key(sym.ELSE);  }
        case 526: break;
        case 252: 
          {  return key(sym.LONG);  }
        case 527: break;
        case 251: 
          {  return key(sym.CHAR);  }
        case 528: break;
        case 246: 
          {  return key(sym.CASE);  }
        case 529: break;
        case 244: 
          {  return key(sym.THIS);  }
        case 530: break;
        case 236: 
          {  return key(sym.SOME);  }
        case 531: break;
        case 233: 
          {  return key(sym.BYTE);  }
        case 532: break;
        case 197: 
          {  return key(sym.FOR);  }
        case 533: break;
        case 192: 
          {  return key(sym.INT);  }
        case 534: break;
        case 189: 
          {  return key(sym.NEW);  }
        case 535: break;
        case 175: 
          {  return key(sym.TRY);  }
        case 536: break;
        case 163: 
          {  return key(sym.ALL);  }
        case 537: break;
        case 50: 
          {  return op(sym.MOD);  }
        case 538: break;
        case 49: 
          {  return op(sym.XOR);  }
        case 539: break;
        case 47: 
          {  return op(sym.OR);  }
        case 540: break;
        case 46: 
          {  return op(sym.AND);  }
        case 541: break;
        case 42: 
          {  return op(sym.NOT);  }
        case 542: break;
        case 41: 
          {  return op(sym.LT);  }
        case 543: break;
        case 40: 
          {  return op(sym.GT);  }
        case 544: break;
        case 39: 
          {  return op(sym.EQ);  }
        case 545: break;
        case 11: 
          {  return op(sym.DOT);  }
        case 546: break;
        case 6: 
          {  return op(sym.DIV);  }
        case 547: break;
        case 132: 
        case 133: 
        case 212: 
          {  char val = (char) Integer.parseInt(yytext().substring(1),8);
				   sb.append(val);  }
        case 548: break;
        case 134: 
          {  sb.append( '\"' );  }
        case 549: break;
        case 135: 
          {  sb.append( '\'' );  }
        case 550: break;
        case 136: 
          {  sb.append( '\\' );  }
        case 551: break;
        case 137: 
          {  sb.append( '\b' );  }
        case 552: break;
        case 138: 
          {  sb.append( '\t' );  }
        case 553: break;
        case 139: 
          {  sb.append( '\r' );  }
        case 554: break;
        case 140: 
          {  sb.append( '\n' );  }
        case 555: break;
        case 141: 
          {  sb.append( '\f' );  }
        case 556: break;
        case 57: 
        case 58: 
          {  eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Unterminated character literal at end of line",
					      pos());  }
        case 557: break;
        case 8: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 104: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 161: 
        case 162: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 190: 
        case 191: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 234: 
        case 235: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 243: 
        case 245: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 254: 
        case 255: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 272: 
        case 274: 
        case 279: 
        case 280: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 288: 
        case 289: 
        case 291: 
        case 294: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 317: 
        case 319: 
        case 321: 
        case 322: 
        case 324: 
        case 327: 
        case 328: 
        case 330: 
        case 331: 
        case 333: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 342: 
        case 346: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 353: 
        case 354: 
        case 355: 
        case 359: 
        case 360: 
        case 362: 
        case 368: 
        case 369: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 380: 
        case 382: 
        case 384: 
        case 390: 
        case 396: 
          {  return id();  }
        case 558: break;
        case 3: 
        case 55: 
        case 56: 
        case 59: 
          {  eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Illegal character \""+yytext()+"\"",
					      pos());  }
        case 559: break;
        case 13: 
          {  yybegin(STRING); sb.setLength(0);  }
        case 560: break;
        case 131: 
          {  eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Illegal escape sequence \""+yytext()+"\"",
					      pos());  }
        case 561: break;
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
          {  eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Illegal escape sequence \""+yytext()+"\"",
					      pos());  }
        case 562: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
              {         return new EOF(pos(), sym.EOF); 
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
