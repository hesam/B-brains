/* The following code was generated by JFlex 1.3.5 on 8/27/09 4:45 PM */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2001  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * This program is free software; you can redistribute it and/or modify    *
 * it under the terms of the GNU General Public License. See the file      *
 * COPYRIGHT for more information.                                         *
 *                                                                         *
 * This program is distributed in the hope that it will be useful,         *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
 * GNU General Public License for more details.                            *
 *                                                                         *
 * You should have received a copy of the GNU General Public License along *
 * with this program; if not, write to the Free Software Foundation, Inc., *
 * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA                 *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals, 
   because the input is read twice and the methods used to parse
   the numbers are not very fast. 
   For a production quality application (e.g. a Java compiler) 
   this could be optimized */

package polyglot.ext.esj.parse;

import java_cup.runtime.Symbol;
import polyglot.lex.*;
import polyglot.util.Position;
import polyglot.util.ErrorQueue;
import polyglot.util.ErrorInfo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 8/27/09 4:45 PM from the specification file
 * <tt>file:/Users/hesam/Desktop/Research/b-brains/java/ESJava/src/polyglot/ext/esj/parse/esj.flex</tt>
 */
public class Lexer_c implements Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRING = 1;
  final public static int YYINITIAL = 0;
  final public static int CHARLITERAL = 2;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\72"+
    "\1\24\1\0\1\6\1\102\1\76\1\25\1\57\1\60\1\5\1\100"+
    "\1\66\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\75"+
    "\1\65\1\71\1\67\1\70\1\74\1\0\3\14\1\103\1\22\1\20"+
    "\5\6\1\12\13\6\1\13\2\6\1\63\1\26\1\64\1\101\1\6"+
    "\1\0\1\27\1\30\1\34\1\46\1\37\1\50\1\53\1\43\1\44"+
    "\1\6\1\41\1\36\1\51\1\40\1\35\1\52\1\6\1\33\1\31"+
    "\1\32\1\45\1\54\1\55\1\47\1\42\1\56\1\61\1\77\1\62"+
    "\1\73\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6"+
    "\4\0\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0\23\7"+
    "\12\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0\4\7"+
    "\3\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6"+
    "\2\0\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0\3\6"+
    "\15\0\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7\7\0"+
    "\12\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7"+
    "\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0"+
    "\1\7\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6\13\7"+
    "\1\6\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0\1\6"+
    "\4\7\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0\1\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0\3\7"+
    "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6\14\0"+
    "\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0"+
    "\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6"+
    "\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0\2\7"+
    "\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7"+
    "\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0"+
    "\3\6\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7\1\0"+
    "\4\7\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6\4\0"+
    "\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7\22\0"+
    "\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6\4\0"+
    "\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6\4\0"+
    "\12\7\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0"+
    "\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0"+
    "\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6"+
    "\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0"+
    "\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0"+
    "\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7"+
    "\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0"+
    "\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0"+
    "\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6"+
    "\6\0\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0"+
    "\1\7\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0"+
    "\4\7\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6"+
    "\7\0\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6"+
    "\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6"+
    "\1\0\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6"+
    "\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\6"+
    "\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6"+
    "\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7"+
    "\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0"+
    "\12\7\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7"+
    "\4\0\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0"+
    "\234\6\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0"+
    "\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0"+
    "\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0"+
    "\7\6\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0"+
    "\4\7\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0"+
    "\15\7\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0"+
    "\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0"+
    "\5\6\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6"+
    "\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6"+
    "\5\0\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6"+
    "\225\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6"+
    "\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7"+
    "\20\0\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6"+
    "\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6"+
    "\4\0\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6"+
    "\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    68,   136,   204,   272,   204,   340,   408,   476,   544, 
      612,   680,   748,   204,   204,   816,   884,   952,  1020,  1088, 
     1156,  1224,  1292,  1360,  1428,  1496,  1564,  1632,  1700,  1768, 
     1836,  1904,   204,   204,   204,   204,   204,   204,   204,   204, 
     1972,  2040,  2108,  2176,   204,   204,   204,  2244,  2312,  2380, 
     2448,  2516,  2584,  2652,   204,   204,  2720,  2788,  2856,   204, 
     2924,  2992,  3060,   204,   204,  3128,  3196,   204,  3264,  3332, 
     3400,  3468,   204,  3536,  3604,   204,   204,   204,  3672,  3740, 
     3808,  3876,  3944,  4012,  4080,  4148,  4216,  4284,  4352,  4420, 
     4488,  4556,  4624,  4692,  4760,  4828,  4896,  4964,  5032,  5100, 
     5168,  5236,  5304,   476,  5372,  5440,  5508,   476,  5576,  5644, 
     5712,  5780,  5848,  5916,  5984,  6052,  6120,  6188,  6256,  6324, 
     6392,   204,   204,  6460,   204,  6528,   204,   204,   204,   204, 
      204,   204,   204,   204,   204,   204,  6596,  6664,   204,   204, 
      204,   204,   204,   204,   204,   204,   204,  6732,  6800,  6868, 
     6936,  7004,  7072,  7140,  7208,  7276,  7344,  7412,   204,  7480, 
     7548,  7616,  7684,  7752,  7820,  7888,  7956,   476,  8024,  8092, 
     8160,  8228,  8296,  8364,  8432,  8500,  8568,  8636,  8704,   476, 
     8772,  8840,  8908,  8976,  9044,  9112,  9180,  9248,  9316,   476, 
     9384,  9452,  9520,  9588,  9656,   476,  9724,  9792,  9860,  9928, 
     9996, 10064, 10132,   476, 10200, 10268, 10336, 10404, 10472, 10540, 
    10608, 10676, 10744, 10812, 10880,   204, 10948,   204,   204,  6800, 
      204, 11016,   204,   204,   204,   204,   204,   204,   204,   204, 
    11084,   204, 11152, 11220, 11288, 11356, 11424, 11492, 11560,   476, 
    11628, 11696,   476, 11764, 11832, 11900, 11968, 12036,   476, 12104, 
      476, 12172,   476, 12240, 12308, 12376, 12444,   476,   476,   476, 
      476, 12512, 12580, 12648,   476, 12716, 12784, 12852, 12920, 12988, 
    13056, 13124, 13192, 13260, 13328, 13396, 13464, 13532, 13600,   476, 
    13668,   476, 13736,   204, 13804, 13872, 13940, 14008, 14076,   476, 
    14144, 14212, 14280, 14348,   476,   476, 14416, 14484, 14552, 14620, 
      476,   476, 14688,   476, 14756, 14824, 14892, 14960, 15028, 15096, 
    15164, 15232, 15300,   476,   476, 15368, 15436, 15504, 15572, 15640, 
    15708, 15776,   476, 15844, 15912, 15980, 16048,   476, 16116,   476, 
    16184, 16252,   476, 16320,   476,   476, 16388, 16456, 16524,   476, 
    16592, 16660,   476, 16728,   476, 16796, 16864, 16932, 17000, 17068, 
    17136,   476, 17204, 17272, 17340, 17408, 17476,   476, 17544, 17612, 
    17680, 17748,   476,   476,   476, 17816, 17884, 17952,   476,   476, 
      476, 18020, 18088,   476, 18156, 18224, 18292, 18360,   476,   476, 
    18428, 18496,   476, 18564, 18632, 18700, 18768, 18836,   476, 18904, 
    18972, 19040, 19108,   476, 19176,   476, 19244,   476,   476, 19312, 
    19380, 19448, 19516,   476,   476, 19584, 19652, 19720, 19788, 19856, 
    19924, 19992,   476, 20060, 20128, 20196, 20264, 20332, 20400, 20468, 
    20536, 20604, 20672, 20740, 20808, 20876, 20944, 20944, 21012, 21080, 
    21148, 21216, 21284, 21352
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\3\11\1\32\1\11\1\33"+
    "\1\11\1\34\1\11\1\35\1\36\1\37\1\40\1\11"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\11\1\65\1\66\1\67"+
    "\21\65\1\70\1\65\1\71\55\65\1\72\1\73\1\74"+
    "\22\72\1\4\1\75\55\72\106\0\1\6\105\0\1\76"+
    "\1\77\61\0\1\100\103\0\1\101\22\0\13\11\1\0"+
    "\1\11\4\0\30\11\24\0\1\11\10\0\1\102\1\103"+
    "\1\104\1\105\1\0\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\13\0\1\104\1\113\6\0\1\114\1\105\1\111"+
    "\32\0\1\114\10\0\2\13\1\104\2\0\3\13\1\111"+
    "\1\112\1\113\13\0\1\104\1\113\6\0\1\114\1\0"+
    "\1\111\32\0\1\114\10\0\2\112\3\0\3\112\107\0"+
    "\1\115\43\0\1\116\22\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\117\1\120\4\11\1\121\20\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\122\1\11"+
    "\1\123\4\11\1\124\14\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\125\2\11\1\126\4\11"+
    "\1\127\1\130\1\11\1\131\7\11\1\132\1\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\133"+
    "\7\11\1\134\13\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\135\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\136\5\11\1\137\1\140"+
    "\4\11\1\141\13\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\142\16\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\143\21\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\144"+
    "\1\11\1\145\6\11\1\146\7\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\147\5\11\1\150\1\11"+
    "\1\151\5\11\1\152\11\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\153\7\11\1\154\1\155"+
    "\5\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\156\1\11\1\157\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\160\5\11\1\161\1\162"+
    "\5\11\1\163\12\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\164\3\11\1\165\11\11\1\166\11\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\167\21\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\170\21\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\14\11\1\171\13\11\24\0\1\11"+
    "\67\0\1\172\103\0\1\173\1\174\102\0\1\175\1\0"+
    "\1\176\101\0\1\177\103\0\1\200\6\0\1\201\74\0"+
    "\1\202\7\0\1\203\73\0\1\204\10\0\1\205\72\0"+
    "\1\206\103\0\1\207\14\0\1\65\2\0\21\65\1\0"+
    "\1\65\1\0\55\65\2\0\1\67\101\0\2\210\1\0"+
    "\5\210\1\211\4\210\2\211\1\212\4\210\1\213\1\214"+
    "\1\215\1\210\1\216\1\210\1\217\1\220\4\210\1\221"+
    "\7\210\1\222\33\210\25\0\1\223\60\0\1\74\101\0"+
    "\2\210\1\0\5\210\1\224\4\210\2\224\1\225\4\210"+
    "\1\226\1\227\1\230\1\210\1\231\1\210\1\232\1\233"+
    "\4\210\1\234\7\210\1\235\33\210\1\76\1\5\1\6"+
    "\101\76\104\236\10\0\1\102\1\103\1\237\2\0\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\13\0\1\237\1\113"+
    "\6\0\1\114\1\0\1\111\32\0\1\114\10\0\2\103"+
    "\3\0\3\103\1\111\1\112\1\113\14\0\1\113\6\0"+
    "\1\114\1\0\1\111\32\0\1\114\10\0\1\240\1\241"+
    "\2\0\5\241\1\0\1\241\4\0\2\241\3\0\1\241"+
    "\2\0\1\241\6\0\1\241\1\0\1\241\32\0\1\241"+
    "\10\0\1\242\1\103\1\237\2\0\3\242\1\111\1\112"+
    "\1\113\13\0\1\237\1\113\6\0\1\114\1\0\1\111"+
    "\32\0\1\114\10\0\1\110\1\103\1\237\2\0\3\110"+
    "\1\111\1\112\1\113\13\0\1\237\1\113\6\0\1\114"+
    "\1\0\1\111\32\0\1\114\10\0\1\243\1\103\1\237"+
    "\2\0\3\243\1\111\1\112\1\113\13\0\1\237\1\113"+
    "\6\0\1\114\1\0\1\111\32\0\1\114\10\0\2\112"+
    "\3\0\3\112\1\111\1\0\1\113\14\0\1\113\6\0"+
    "\1\114\1\0\1\111\32\0\1\114\10\0\2\244\3\0"+
    "\3\244\3\0\1\245\54\0\1\245\11\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\246\25\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\247\25\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\250"+
    "\20\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\251\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\252\21\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\253\24\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\254\3\11"+
    "\1\255\23\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\22\11\1\256\5\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\257\16\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\260\21\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\23\11"+
    "\1\261\4\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\262\12\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\263\12\11\1\264\2\11\1\265"+
    "\11\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\266\10\11\1\267\12\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\270\24\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\271"+
    "\1\272\24\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\273\16\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\274\27\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\275\27\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\276\17\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\277\16\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\300\25\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\301\25\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\302\24\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\303\24\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\26\11\1\304\1\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\7\11\1\305\20\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\306\1\307"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\23\11\1\310\4\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\16\11\1\311\11\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\21\11\1\312\6\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\313"+
    "\20\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\314\23\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\315\21\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\316\16\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\317"+
    "\22\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\320\1\11\1\321\4\11\1\322\12\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\323"+
    "\26\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\324\24\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\325\5\11\1\326\12\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\15\11\1\327"+
    "\12\11\24\0\1\11\67\0\1\330\1\331\102\0\1\332"+
    "\24\0\1\212\4\0\3\212\74\0\1\333\4\0\3\333"+
    "\74\0\1\334\4\0\3\334\5\0\1\335\66\0\1\336"+
    "\4\0\3\336\5\0\1\335\103\0\1\337\103\0\1\340"+
    "\103\0\1\341\103\0\1\342\103\0\1\343\103\0\1\344"+
    "\103\0\1\345\103\0\1\346\56\0\5\236\1\347\76\236"+
    "\10\0\1\240\1\241\1\350\1\0\5\241\1\0\1\241"+
    "\4\0\2\241\3\0\1\241\1\0\1\350\1\241\6\0"+
    "\1\241\1\0\1\241\32\0\1\241\10\0\2\351\1\350"+
    "\1\0\5\351\1\0\1\351\4\0\2\351\3\0\1\351"+
    "\1\0\1\350\1\351\6\0\1\351\1\0\1\351\32\0"+
    "\1\351\10\0\1\352\1\103\1\237\2\0\3\352\1\111"+
    "\1\112\1\113\13\0\1\237\1\113\6\0\1\114\1\0"+
    "\1\111\32\0\1\114\10\0\1\353\1\103\1\237\2\0"+
    "\3\353\1\111\1\112\1\113\13\0\1\237\1\113\6\0"+
    "\1\114\1\0\1\111\32\0\1\114\10\0\2\244\3\0"+
    "\3\244\1\111\25\0\1\114\1\0\1\111\32\0\1\114"+
    "\10\0\2\244\3\0\3\244\72\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\354\24\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\355\17\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\356\27\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\357"+
    "\20\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\360\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\361\24\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\362\12\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\363"+
    "\17\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\364\22\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\4\11\1\365\23\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\366\17\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\367"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\370\16\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\371\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\372\21\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\373"+
    "\25\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\374\11\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\375\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\376\22\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\377"+
    "\1\u0100\24\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u0101\25\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\u0102\23\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u0103\13\11"+
    "\1\u0104\3\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u0105\17\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\16\11\1\u0106\11\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u0107\17\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\u0108\12\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\7\11\1\u0109\20\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\u010a\24\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u010b\17\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\u010c\1\u010d\20\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\u010e\26\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u010f\27\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\u0110\25\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\1\u0111"+
    "\27\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\u0112\27\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u0113\15\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\u0114\24\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\17\11\1\u0115\10\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\25\11"+
    "\1\u0116\2\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\7\11\1\u0117\20\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\u0118\21\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u0119\27\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\17\11\1\u011a"+
    "\10\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\u011b\20\11\24\0\1\11\67\0\1\u011c\41\0"+
    "\1\335\56\0\4\236\1\6\1\347\76\236\10\0\2\u011d"+
    "\1\350\1\0\5\u011d\1\0\1\u011d\4\0\2\u011d\3\0"+
    "\1\u011d\1\0\1\350\1\u011d\6\0\1\u011d\1\0\1\u011d"+
    "\32\0\1\u011d\10\0\1\u011e\1\103\1\237\2\0\3\u011e"+
    "\1\111\1\112\1\113\13\0\1\237\1\113\6\0\1\114"+
    "\1\0\1\111\32\0\1\114\10\0\1\u011f\1\103\1\237"+
    "\2\0\3\u011f\1\111\1\112\1\113\13\0\1\237\1\113"+
    "\6\0\1\114\1\0\1\111\32\0\1\114\6\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\u0120\23\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\u0121\23\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\u0122\15\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u0123\17\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\u0124\12\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u0125\22\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\14\11"+
    "\1\u0126\13\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u0127\24\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\u0128\23\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u0129\22\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\u012a\25\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\26\11\1\u012b\1\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\u012c\23\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\14\11\1\u012d\13\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\u012e\24\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u012f\12\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\u0130\25\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\u0131\23\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\u0132\16\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\25\11\1\u0133\2\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\u0134\27\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u0135\23\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\u0136"+
    "\23\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u0137\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\u0138\20\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\u0139\11\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u013a"+
    "\17\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\u013b\24\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\u013c\20\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u013d\27\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u013e\17\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\u013f\12\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u0140\27\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0141\12\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\u0142\24\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u0143"+
    "\17\11\24\0\1\11\10\0\2\u0144\1\350\1\0\5\u0144"+
    "\1\0\1\u0144\4\0\2\u0144\3\0\1\u0144\1\0\1\350"+
    "\1\u0144\6\0\1\u0144\1\0\1\u0144\32\0\1\u0144\10\0"+
    "\1\u0145\1\103\1\237\2\0\3\u0145\1\111\1\112\1\113"+
    "\13\0\1\237\1\113\6\0\1\114\1\0\1\111\32\0"+
    "\1\114\10\0\1\u0146\1\103\1\237\2\0\3\u0146\1\111"+
    "\1\112\1\113\13\0\1\237\1\113\6\0\1\114\1\0"+
    "\1\111\32\0\1\114\6\0\13\11\1\0\1\11\4\0"+
    "\1\u0147\27\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u0148\24\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\u0149\27\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u014a\22\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u014b"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\u014c\23\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\14\11\1\u014d\13\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u014e\12\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\u014f"+
    "\25\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u0150\16\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\u0151\16\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u0152\17\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\17\11\1\u0153"+
    "\10\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u0154\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\u0155\16\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\21\11\1\u0156\6\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u0157"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\22\11\1\u0158\5\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u0159\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\u015a\20\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\u015b"+
    "\20\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\24\11\1\u015c\3\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u015d\22\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u015e\22\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u015f"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\u0160\22\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0161\12\11\24\0\1\11\10\0"+
    "\2\u0162\1\350\1\0\5\u0162\1\0\1\u0162\4\0\2\u0162"+
    "\3\0\1\u0162\1\0\1\350\1\u0162\6\0\1\u0162\1\0"+
    "\1\u0162\32\0\1\u0162\10\0\1\u0163\1\103\1\237\2\0"+
    "\3\u0163\1\111\1\112\1\113\13\0\1\237\1\113\6\0"+
    "\1\114\1\0\1\111\32\0\1\114\10\0\1\u0164\1\103"+
    "\1\237\2\0\3\u0164\1\111\1\112\1\113\13\0\1\237"+
    "\1\113\6\0\1\114\1\0\1\111\32\0\1\114\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u0165\22\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u0166"+
    "\16\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\21\11\1\u0167\6\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\u0168\21\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u0169\17\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u016a"+
    "\11\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u016b\14\11\1\u016c\10\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u016d\25\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\u016e"+
    "\22\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\u016f\27\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u0170\17\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\u0171\24\11\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\13\11\1\u0172\14\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0173\17\11\24\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u0174\24\11\24\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\u0175\27\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u0176\17\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\u0177"+
    "\20\11\24\0\1\11\10\0\2\u0178\1\350\1\0\5\u0178"+
    "\1\0\1\u0178\4\0\2\u0178\3\0\1\u0178\1\0\1\350"+
    "\1\u0178\6\0\1\u0178\1\0\1\u0178\32\0\1\u0178\10\0"+
    "\1\u0179\1\103\1\237\2\0\3\u0179\1\111\1\112\1\113"+
    "\13\0\1\237\1\113\6\0\1\114\1\0\1\111\32\0"+
    "\1\114\10\0\1\u017a\1\103\1\237\2\0\3\u017a\1\111"+
    "\1\112\1\113\13\0\1\237\1\113\6\0\1\114\1\0"+
    "\1\111\32\0\1\114\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\u017b\24\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\23\11\1\u017c\4\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u017d\16\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u017e"+
    "\16\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u017f\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u0180\17\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u0181\22\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u0182"+
    "\16\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u0183\17\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u0184\24\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u0185\17\11\24\0"+
    "\1\11\10\0\2\u0186\1\350\1\0\5\u0186\1\0\1\u0186"+
    "\4\0\2\u0186\3\0\1\u0186\1\0\1\350\1\u0186\6\0"+
    "\1\u0186\1\0\1\u0186\32\0\1\u0186\10\0\1\u0187\1\103"+
    "\1\237\2\0\3\u0187\1\111\1\112\1\113\13\0\1\237"+
    "\1\113\6\0\1\114\1\0\1\111\32\0\1\114\10\0"+
    "\1\u0188\1\103\1\237\2\0\3\u0188\1\111\1\112\1\113"+
    "\13\0\1\237\1\113\6\0\1\114\1\0\1\111\32\0"+
    "\1\114\6\0\13\11\1\0\1\11\4\0\15\11\1\u0189"+
    "\12\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\u018a\24\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\u018b\21\11\24\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u018c\17\11\24\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u018d"+
    "\24\11\24\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\17\11\1\u018e\10\11\24\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u018f\17\11\24\0\1\11\10\0"+
    "\2\u0190\1\350\1\0\5\u0190\1\0\1\u0190\4\0\2\u0190"+
    "\3\0\1\u0190\1\0\1\350\1\u0190\6\0\1\u0190\1\0"+
    "\1\u0190\32\0\1\u0190\10\0\1\u0191\1\103\1\237\2\0"+
    "\3\u0191\1\111\1\112\1\113\13\0\1\237\1\113\6\0"+
    "\1\114\1\0\1\111\32\0\1\114\10\0\1\u0192\1\103"+
    "\1\237\2\0\3\u0192\1\111\1\112\1\113\13\0\1\237"+
    "\1\113\6\0\1\114\1\0\1\111\32\0\1\114\6\0"+
    "\13\11\1\0\1\11\4\0\27\11\1\u0193\24\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\21\11\1\u0194\6\11"+
    "\24\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\u0195\25\11\24\0\1\11\10\0\2\u0196\1\350\1\0"+
    "\5\u0196\1\0\1\u0196\4\0\2\u0196\3\0\1\u0196\1\0"+
    "\1\350\1\u0196\6\0\1\u0196\1\0\1\u0196\32\0\1\u0196"+
    "\10\0\1\u0197\1\103\1\237\2\0\3\u0197\1\111\1\112"+
    "\1\113\13\0\1\237\1\113\6\0\1\114\1\0\1\111"+
    "\32\0\1\114\10\0\1\u0198\1\103\1\237\2\0\3\u0198"+
    "\1\111\1\112\1\113\13\0\1\237\1\113\6\0\1\114"+
    "\1\0\1\111\32\0\1\114\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u0199\17\11\24\0\1\11\10\0\2\u019a"+
    "\1\350\1\0\5\u019a\1\0\1\u019a\4\0\2\u019a\3\0"+
    "\1\u019a\1\0\1\350\1\u019a\6\0\1\u019a\1\0\1\u019a"+
    "\32\0\1\u019a\10\0\1\u019b\1\103\1\237\2\0\3\u019b"+
    "\1\111\1\112\1\113\13\0\1\237\1\113\6\0\1\114"+
    "\1\0\1\111\32\0\1\114\10\0\1\u019c\1\103\1\237"+
    "\2\0\3\u019c\1\111\1\112\1\113\13\0\1\237\1\113"+
    "\6\0\1\114\1\0\1\111\32\0\1\114\6\0\13\11"+
    "\1\0\1\11\4\0\17\11\1\u019d\10\11\24\0\1\11"+
    "\10\0\2\u019e\1\350\1\0\5\u019e\1\0\1\u019e\4\0"+
    "\2\u019e\3\0\1\u019e\1\0\1\350\1\u019e\6\0\1\u019e"+
    "\1\0\1\u019e\32\0\1\u019e\10\0\1\u019f\1\103\1\237"+
    "\2\0\3\u019f\1\111\1\112\1\113\13\0\1\237\1\113"+
    "\6\0\1\114\1\0\1\111\32\0\1\114\10\0\1\u01a0"+
    "\1\103\1\237\2\0\3\u01a0\1\111\1\112\1\113\13\0"+
    "\1\237\1\113\6\0\1\114\1\0\1\111\32\0\1\114"+
    "\10\0\2\u01a1\1\350\1\0\5\u01a1\1\0\1\u01a1\4\0"+
    "\2\u01a1\3\0\1\u01a1\1\0\1\350\1\u01a1\6\0\1\u01a1"+
    "\1\0\1\u01a1\32\0\1\u01a1\10\0\1\u01a2\1\103\1\237"+
    "\2\0\3\u01a2\1\111\1\112\1\113\13\0\1\237\1\113"+
    "\6\0\1\114\1\0\1\111\32\0\1\114\10\0\1\u01a3"+
    "\1\103\1\237\2\0\3\u01a3\1\111\1\112\1\113\13\0"+
    "\1\237\1\113\6\0\1\114\1\0\1\111\32\0\1\114"+
    "\10\0\2\u01a4\1\350\1\0\5\u01a4\1\0\1\u01a4\4\0"+
    "\2\u01a4\3\0\1\u01a4\1\0\1\350\1\u01a4\6\0\1\u01a4"+
    "\1\0\1\u01a4\32\0\1\u01a4\10\0\1\u01a5\1\103\1\237"+
    "\2\0\3\u01a5\1\111\1\112\1\113\13\0\1\237\1\113"+
    "\6\0\1\114\1\0\1\111\32\0\1\114\10\0\1\u01a6"+
    "\1\103\1\237\2\0\3\u01a6\1\111\1\112\1\113\13\0"+
    "\1\237\1\113\6\0\1\114\1\0\1\111\32\0\1\114"+
    "\10\0\2\u01a7\1\350\1\0\5\u01a7\1\0\1\u01a7\4\0"+
    "\2\u01a7\3\0\1\u01a7\1\0\1\350\1\u01a7\6\0\1\u01a7"+
    "\1\0\1\u01a7\32\0\1\u01a7\10\0\1\u01a8\1\103\1\237"+
    "\2\0\3\u01a8\1\111\1\112\1\113\13\0\1\237\1\113"+
    "\6\0\1\114\1\0\1\111\32\0\1\114\10\0\1\u01a9"+
    "\1\103\1\237\2\0\3\u01a9\1\111\1\112\1\113\13\0"+
    "\1\237\1\113\6\0\1\114\1\0\1\111\32\0\1\114"+
    "\10\0\2\u01aa\1\350\1\0\5\u01aa\1\0\1\u01aa\4\0"+
    "\2\u01aa\3\0\1\u01aa\1\0\1\350\1\u01aa\6\0\1\u01aa"+
    "\1\0\1\u01aa\32\0\1\u01aa\10\0\1\u01ab\1\103\1\237"+
    "\2\0\3\u01ab\1\111\1\112\1\113\13\0\1\237\1\113"+
    "\6\0\1\114\1\0\1\111\32\0\1\114\10\0\1\u01ac"+
    "\1\103\1\237\2\0\3\u01ac\1\111\1\112\1\113\13\0"+
    "\1\237\1\113\6\0\1\114\1\0\1\111\32\0\1\114"+
    "\10\0\2\u01ad\1\350\1\0\5\u01ad\1\0\1\u01ad\4\0"+
    "\2\u01ad\3\0\1\u01ad\1\0\1\350\1\u01ad\6\0\1\u01ad"+
    "\1\0\1\u01ad\32\0\1\u01ad\10\0\1\u01ae\1\103\1\237"+
    "\2\0\3\u01ae\1\111\1\112\1\113\13\0\1\237\1\113"+
    "\6\0\1\114\1\0\1\111\32\0\1\114\12\0\1\350"+
    "\23\0\1\350\55\0\1\u01af\1\103\1\237\2\0\3\u01af"+
    "\1\111\1\112\1\113\13\0\1\237\1\113\6\0\1\114"+
    "\1\0\1\111\32\0\1\114\10\0\1\u01b0\1\103\1\237"+
    "\2\0\3\u01b0\1\111\1\112\1\113\13\0\1\237\1\113"+
    "\6\0\1\114\1\0\1\111\32\0\1\114\10\0\1\u01b1"+
    "\1\103\1\237\2\0\3\u01b1\1\111\1\112\1\113\13\0"+
    "\1\237\1\113\6\0\1\114\1\0\1\111\32\0\1\114"+
    "\10\0\1\u01b2\1\103\1\237\2\0\3\u01b2\1\111\1\112"+
    "\1\113\13\0\1\237\1\113\6\0\1\114\1\0\1\111"+
    "\32\0\1\114\10\0\2\103\1\237\2\0\3\103\1\111"+
    "\1\112\1\113\13\0\1\237\1\113\6\0\1\114\1\0"+
    "\1\111\32\0\1\114";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  9,  9,  9,  9,  9,  9,  9,  1,  1,  1,  1,  9,  9,  9,  1, 
     1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  1,  9,  1,  0,  0,  9, 
     9,  1,  1,  9,  0,  1,  1,  1,  9,  1,  0,  9,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  9,  1,  9,  9, 
     9,  9,  9,  9,  9,  9,  9,  9,  1,  1,  9,  9,  9,  9,  9,  9, 
     9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  1, 
     1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  1,  9,  9,  0,  9,  0,  9,  9, 
     9,  9,  9,  9,  9,  9,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  1,  1,  1,  0,  1,  1,  1,  0,  1,  1, 
     0,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1, 
     1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    StringBuffer sb = new StringBuffer();
    String file;
    ErrorQueue eq;

    public Lexer_c(java.io.InputStream in, String file, ErrorQueue eq) {
        this(new java.io.BufferedReader(new java.io.InputStreamReader(in)),
             file, eq);
    }
    
    public Lexer_c(java.io.Reader reader, String file, ErrorQueue eq) {
        this(new EscapedUnicodeReader(reader));
        this.file = file;
        this.eq = eq;
    }

    public String file() {
        return file;
    }

    private Position pos() {
        return new Position(file, yyline+1, yycolumn);
    }

    private Token key(int symbol) {
        return new Keyword(pos(), yytext(), symbol);
    }

    private Token op(int symbol) {
        return new Operator(pos(), yytext(), symbol);
    }

    private Token id() {
        return new Identifier(pos(), yytext(), sym.IDENTIFIER);
    }

    private Token int_token(String s, int radix) {
        long x = parseLong(s, radix);
        return new IntegerLiteral(pos(), (int) x, sym.INTEGER_LITERAL);
    }

    private Token long_token(String s, int radix) {
        long x = parseLong(s, radix);
        return new LongLiteral(pos(), x, sym.LONG_LITERAL);
    }

    private Token float_token(String s) {
        float x = Float.valueOf(s).floatValue();
        return new FloatLiteral(pos(), x, sym.FLOAT_LITERAL);
    }

    private Token double_token(String s) {
        double x = Double.valueOf(s).doubleValue();
        return new DoubleLiteral(pos(), x, sym.DOUBLE_LITERAL);
    }
    
    private Token char_token(char x) {
        return new CharacterLiteral(pos(), x, sym.CHARACTER_LITERAL);
    }

    private Token boolean_token(boolean x) {
        return new BooleanLiteral(pos(), x, sym.BOOLEAN_LITERAL);
    }

    private Token null_token() {
        return new NullLiteral(pos(), sym.NULL_LITERAL);
    }

    private Token string_token() {
        return new StringLiteral(pos(), sb.toString(), sym.STRING_LITERAL);
    }

  /* assumes correct representation of a long value for 
     specified radix in String s */
  private long parseLong(String s, int radix) {
    int max = s.length();
    long result = 0;
    long digit;

    for (int i = 0; i < max; i++) {
      digit = Character.digit(s.charAt(i), radix);
      result *= radix;
      result += digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer_c(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer_c(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[21420];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1782) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 131: 
          {  return op(sym.PLUSEQ);  }
        case 435: break;
        case 128: 
          {  return op(sym.ANDAND);  }
        case 436: break;
        case 125: 
          {  return op(sym.LSHIFT);  }
        case 437: break;
        case 123: 
          {  return op(sym.RSHIFT);  }
        case 438: break;
        case 109: 
          {  return key(sym.DO);  }
        case 439: break;
        case 107: 
          {  return key(sym.IF);  }
        case 440: break;
        case 103: 
          {  return key(sym.NO);  }
        case 441: break;
        case 77: 
          {  return op(sym.MINUSEQ);  }
        case 442: break;
        case 64: 
          {  return op(sym.MULTEQ);  }
        case 443: break;
        case 37: 
          {  return op(sym.RBRACK);  }
        case 444: break;
        case 36: 
          {  return op(sym.LBRACK);  }
        case 445: break;
        case 35: 
          {  return op(sym.RBRACE);  }
        case 446: break;
        case 34: 
          {  return op(sym.LBRACE);  }
        case 447: break;
        case 33: 
          {  return op(sym.RPAREN);  }
        case 448: break;
        case 32: 
          {  return op(sym.LPAREN);  }
        case 449: break;
        case 52: 
          {  sb.append( yytext() );  }
        case 450: break;
        case 216: 
          {  return op(sym.URSHIFT);  }
        case 451: break;
        case 357: 
          {  return key(sym.BOOLEAN);  }
        case 452: break;
        case 362: 
          {  return key(sym.ENSURES);  }
        case 453: break;
        case 363: 
          {  return key(sym.ENSURED);  }
        case 454: break;
        case 364: 
          {  return key(sym.EXTENDS);  }
        case 455: break;
        case 368: 
          {  return key(sym.DEFAULT);  }
        case 456: break;
        case 369: 
          {  return key(sym.FINALLY);  }
        case 457: break;
        case 370: 
          {  return key(sym.PACKAGE);  }
        case 458: break;
        case 373: 
          {  return key(sym.PRIVATE);  }
        case 459: break;
        case 378: 
          {  return key(sym.ABSTRACT);  }
        case 460: break;
        case 379: 
          {  return key(sym.STRICTFP);  }
        case 461: break;
        case 382: 
          {  return key(sym.CONTINUE);  }
        case 462: break;
        case 388: 
          {  return key(sym.VOLATILE);  }
        case 463: break;
        case 158: 
          {  return long_token(yytext().substring(0,yylength()-1), 8);  }
        case 464: break;
        case 159: 
        case 160: 
        case 232: 
        case 284: 
        case 323: 
        case 353: 
        case 375: 
        case 389: 
        case 399: 
          {  return int_token(yytext().substring(2), 16);  }
        case 465: break;
        case 224: 
          {  yybegin(YYINITIAL); return char_token('\\');  }
        case 466: break;
        case 134: 
          {  return op(sym.MODEQ);  }
        case 467: break;
        case 133: 
          {  return op(sym.XOREQ);  }
        case 468: break;
        case 130: 
          {  return op(sym.OROR);  }
        case 469: break;
        case 129: 
          {  return op(sym.OREQ);  }
        case 470: break;
        case 127: 
          {  return op(sym.ANDEQ);  }
        case 471: break;
        case 126: 
          {  return op(sym.NOTEQ);  }
        case 472: break;
        case 124: 
          {  return op(sym.LTEQ);  }
        case 473: break;
        case 122: 
          {  return op(sym.GTEQ);  }
        case 474: break;
        case 121: 
          {  return op(sym.EQEQ);  }
        case 475: break;
        case 7: 
          {  return op(sym.MULT);  }
        case 476: break;
        case 12: 
          {  return op(sym.MINUS);  }
        case 477: break;
        case 39: 
          {  return op(sym.COMMA);  }
        case 478: break;
        case 44: 
          {  return op(sym.COMP);  }
        case 479: break;
        case 46: 
          {  return op(sym.COLON);  }
        case 480: break;
        case 49: 
          {  return op(sym.PLUS);  }
        case 481: break;
        case 63: 
          {  return op(sym.DIVEQ);  }
        case 482: break;
        case 289: 
          {  return key(sym.BREAK);  }
        case 483: break;
        case 294: 
          {  return key(sym.SHORT);  }
        case 484: break;
        case 295: 
          {  return key(sym.SUPER);  }
        case 485: break;
        case 298: 
          {  return key(sym.THROW);  }
        case 486: break;
        case 300: 
          {  return key(sym.CATCH);  }
        case 487: break;
        case 301: 
          {  return key(sym.CONST);  }
        case 488: break;
        case 303: 
          {  return key(sym.CLASS);  }
        case 489: break;
        case 314: 
          {  return key(sym.FLOAT);  }
        case 490: break;
        case 315: 
          {  return key(sym.FINAL);  }
        case 491: break;
        case 322: 
          {  return key(sym.WHILE);  }
        case 492: break;
        case 327: 
          {  return key(sym.ASSERT);  }
        case 493: break;
        case 329: 
          {  return key(sym.STATIC);  }
        case 494: break;
        case 332: 
          {  return key(sym.SWITCH);  }
        case 495: break;
        case 334: 
          {  return key(sym.THROWS);  }
        case 496: break;
        case 335: 
          {  return key(sym.RETURN);  }
        case 497: break;
        case 339: 
          {  return key(sym.NATIVE);  }
        case 498: break;
        case 342: 
          {  return key(sym.IMPORT);  }
        case 499: break;
        case 344: 
          {  return key(sym.DOUBLE);  }
        case 500: break;
        case 351: 
          {  return key(sym.PUBLIC);  }
        case 501: break;
        case 66: 
        case 73: 
        case 163: 
        case 427: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
          {  return double_token(yytext());  }
        case 502: break;
        case 4: 
        case 5: 
          {  /* ignore */  }
        case 503: break;
        case 65: 
        case 69: 
        case 70: 
        case 71: 
        case 161: 
        case 162: 
        case 233: 
        case 234: 
        case 285: 
        case 286: 
        case 324: 
        case 325: 
        case 354: 
        case 355: 
        case 376: 
        case 377: 
        case 390: 
        case 391: 
        case 400: 
        case 401: 
        case 406: 
        case 407: 
        case 410: 
        case 411: 
        case 414: 
        case 415: 
        case 417: 
        case 418: 
        case 420: 
        case 421: 
        case 423: 
        case 424: 
        case 426: 
          {  return int_token(yytext(), 8);  }
        case 504: break;
        case 9: 
        case 10: 
          {  return int_token(yytext(), 10);  }
        case 505: break;
        case 248: 
          {  return boolean_token(true);  }
        case 506: break;
        case 404: 
          {  return key(sym.IMPLEMENTS);  }
        case 507: break;
        case 132: 
          {  return op(sym.PLUSPLUS);  }
        case 508: break;
        case 38: 
          {  return op(sym.SEMICOLON);  }
        case 509: break;
        case 45: 
          {  return op(sym.QUESTION);  }
        case 510: break;
        case 215: 
          {  return op(sym.RSHIFTEQ);  }
        case 511: break;
        case 217: 
          {  return op(sym.LSHIFTEQ);  }
        case 512: break;
        case 283: 
          {  return op(sym.URSHIFTEQ);  }
        case 513: break;
        case 393: 
          {  return key(sym.TRANSIENT);  }
        case 514: break;
        case 395: 
          {  return key(sym.INTERFACE);  }
        case 515: break;
        case 397: 
          {  return key(sym.PROTECTED);  }
        case 516: break;
        case 398: 
          {  return key(sym.PREDICATE);  }
        case 517: break;
        case 403: 
          {  return key(sym.INSTANCEOF);  }
        case 518: break;
        case 264: 
          {  return null_token();  }
        case 519: break;
        case 220: 
          {  yybegin(YYINITIAL);
				    long val = parseLong(yytext().substring(1,yylength()-1), 8);
			            return char_token((char)val);  }
        case 520: break;
        case 53: 
        case 54: 
          {  eq.enqueue(ErrorInfo.LEXICAL_ERROR,
					      "Unterminated string at end of line",
					      pos());  }
        case 521: break;
        case 55: 
          {  yybegin(YYINITIAL); return string_token();  }
        case 522: break;
        case 222: 
          {  yybegin(YYINITIAL); return char_token('\"'); }
        case 523: break;
        case 223: 
          {  yybegin(YYINITIAL); return char_token('\''); }
        case 524: break;
        case 225: 
          {  yybegin(YYINITIAL); return char_token('\b'); }
        case 525: break;
        case 226: 
          {  yybegin(YYINITIAL); return char_token('\t'); }
        case 526: break;
        case 227: 
          {  yybegin(YYINITIAL); return char_token('\r'); }
        case 527: break;
        case 228: 
          {  yybegin(YYINITIAL); return char_token('\n'); }
        case 528: break;
        case 229: 
          {  yybegin(YYINITIAL); return char_token('\f'); }
        case 529: break;
        case 67: 
          {  return long_token(yytext().substring(0,yylength()-1), 10);  }
        case 530: break;
        case 231: 
          {  return long_token(yytext().substring(2,yylength()-1), 16);  }
        case 531: break;
        case 146: 
          {  yybegin(YYINITIAL); return char_token(yytext().charAt(0));  }
        case 532: break;
        case 313: 
          {  return boolean_token(false);  }
        case 533: break;
        case 14: 
          {  yybegin(CHARLITERAL);  }
        case 534: break;
        case 412: 
          {  return key(sym.SYNCHRONIZED);  }
        case 535: break;
        case 76: 
          {  return op(sym.MINUSMINUS);  }
        case 536: break;
        case 75: 
          {  return double_token(yytext().substring(0,yylength()-1));  }
        case 537: break;
        case 72: 
          {  return float_token(yytext().substring(0,yylength()-1));  }
        case 538: break;
        case 145: 
          {  sb.append( '\f' );  }
        case 539: break;
        case 144: 
          {  sb.append( '\n' );  }
        case 540: break;
        case 143: 
          {  sb.append( '\r' );  }
        case 541: break;
        case 142: 
          {  sb.append( '\t' );  }
        case 542: break;
        case 141: 
          {  sb.append( '\b' );  }
        case 543: break;
        case 140: 
          {  sb.append( '\\' );  }
        case 544: break;
        case 139: 
          {  sb.append( '\'' );  }
        case 545: break;
        case 138: 
          {  sb.append( '\"' );  }
        case 546: break;
        case 136: 
        case 137: 
        case 218: 
          {  char val = (char) Integer.parseInt(yytext().substring(1),8);
				   sb.append(val);  }
        case 547: break;
        case 6: 
          {  return op(sym.DIV);  }
        case 548: break;
        case 11: 
          {  return op(sym.DOT);  }
        case 549: break;
        case 40: 
          {  return op(sym.EQ);  }
        case 550: break;
        case 41: 
          {  return op(sym.GT);  }
        case 551: break;
        case 42: 
          {  return op(sym.LT);  }
        case 552: break;
        case 43: 
          {  return op(sym.NOT);  }
        case 553: break;
        case 47: 
          {  return op(sym.AND);  }
        case 554: break;
        case 48: 
          {  return op(sym.OR);  }
        case 555: break;
        case 50: 
          {  return op(sym.XOR);  }
        case 556: break;
        case 51: 
          {  return op(sym.MOD);  }
        case 557: break;
        case 167: 
          {  return key(sym.ALL);  }
        case 558: break;
        case 179: 
          {  return key(sym.TRY);  }
        case 559: break;
        case 189: 
          {  return key(sym.ONE);  }
        case 560: break;
        case 195: 
          {  return key(sym.NEW);  }
        case 561: break;
        case 198: 
          {  return key(sym.INT);  }
        case 562: break;
        case 203: 
          {  return key(sym.FOR);  }
        case 563: break;
        case 239: 
          {  return key(sym.BYTE);  }
        case 564: break;
        case 242: 
          {  return key(sym.SOME);  }
        case 565: break;
        case 250: 
          {  return key(sym.THIS);  }
        case 566: break;
        case 252: 
          {  return key(sym.CASE);  }
        case 567: break;
        case 257: 
          {  return key(sym.CHAR);  }
        case 568: break;
        case 258: 
          {  return key(sym.LONE);  }
        case 569: break;
        case 259: 
          {  return key(sym.LONG);  }
        case 570: break;
        case 260: 
          {  return key(sym.ELSE);  }
        case 571: break;
        case 279: 
          {  return key(sym.GOTO);  }
        case 572: break;
        case 281: 
          {  return key(sym.VOID);  }
        case 573: break;
        case 135: 
          {  eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Illegal escape sequence \""+yytext()+"\"",
					      pos());  }
        case 574: break;
        case 13: 
          {  yybegin(STRING); sb.setLength(0);  }
        case 575: break;
        case 3: 
        case 56: 
        case 57: 
        case 60: 
          {  eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Illegal character \""+yytext()+"\"",
					      pos());  }
        case 576: break;
        case 8: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 104: 
        case 105: 
        case 106: 
        case 108: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 165: 
        case 166: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 196: 
        case 197: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 240: 
        case 241: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 249: 
        case 251: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 261: 
        case 262: 
        case 263: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 280: 
        case 282: 
        case 287: 
        case 288: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 296: 
        case 297: 
        case 299: 
        case 302: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 326: 
        case 328: 
        case 330: 
        case 331: 
        case 333: 
        case 336: 
        case 337: 
        case 338: 
        case 340: 
        case 341: 
        case 343: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 352: 
        case 356: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 365: 
        case 366: 
        case 367: 
        case 371: 
        case 372: 
        case 374: 
        case 380: 
        case 381: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 392: 
        case 394: 
        case 396: 
        case 402: 
        case 408: 
          {  return id();  }
        case 577: break;
        case 58: 
        case 59: 
          {  eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Unterminated character literal at end of line",
					      pos());  }
        case 578: break;
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
          {  eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Illegal escape sequence \""+yytext()+"\"",
					      pos());  }
        case 579: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
              {         return new EOF(pos(), sym.EOF); 
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
